name: Extract HTML from URLs

on:
  workflow_dispatch:
    inputs:
      gist_id:
        description: 'ID of the Gist containing URLs (1 URL mỗi dòng)'
        required: true

jobs:
  extract:
    runs-on: ubuntu-latest

    steps:
      - name: Lấy nội dung file raw từ Gist
        run: |
          # Lấy raw_url từ file đầu tiên trong Gist
          RAW_URL=$(curl -s -H "Authorization: token ${{ secrets.dat_kep }}" \
            https://api.github.com/gists/${{ github.event.inputs.gist_id }} \
            | jq -r '.files | to_entries[0].value.raw_url')

          # Tải danh sách URL dạng raw text
          curl -L "$RAW_URL" -o urls.txt

      - name: Trích xuất HTML và metadata
        run: |
          INPUT_TXT="urls.txt"
          OUTPUT_JSON="processed_urls.jsonl"
          > "$OUTPUT_JSON"

          if [ ! -s "$INPUT_TXT" ]; then
            echo "❌ Error: File rỗng hoặc không tồn tại."
            exit 1
          fi

          get_post_type_from_url() {
            case "$1" in
              *"/reel/"*) echo "reel" ;;
              *"/story.php"*|*"/stories/"*) echo "story" ;;
              *"/video"*|*"/watch"*|*"/videos/"*) echo "video" ;;
              *"/photo"*|*"/photos/"*) echo "photo" ;;
              *"/groups/"*) echo "group_post" ;;
              *"/posts/"*) echo "post" ;;
              *"/events/"*) echo "event" ;;
              *"facebook.com/"*) echo "profile" ;;
              *) echo "unknown" ;;
            esac
          }

          while read -r url; do
            [ -z "$url" ] && continue

            html=$(curl -sL --max-time 15 -A "Mozilla/5.0" "$url")

            if [ -z "$html" ]; then
              title="Bài viết lỗi"
              desc="Không có nội dung"
              img=""
              status="error"
            else
              title=$(echo "$html" | grep -oP '(?<=<title>).*?(?=</title>)' | head -n1)
              og_title=$(echo "$html" | grep -oP '<meta property="og:title" content="\K[^"]*' | head -n1)
              og_desc=$(echo "$html" | grep -oP '<meta property="og:description" content="\K[^"]*' | head -n1)
              og_img=$(echo "$html" | grep -oP '<meta property="og:image" content="\K[^"]*' | head -n1)

              final_title=${og_title:-${title:-"Bài viết lỗi"}}
              final_desc=${og_desc:-"Không có nội dung"}
              final_image=${og_img:-""}

              if [ -n "$og_desc" ] || [ -n "$og_img" ]; then
                status="success"
              else
                if echo "$html" | grep -qi "login"; then status="login"
                elif echo "$html" | grep -qi "content not found\|unavailable\|removed"; then status="link_hỏng"
                else status="error"
                fi
              fi
            fi

            post_type=$(get_post_type_from_url "$url")

            # Escape chuỗi JSON
            safe_title=$(printf '%s' "$final_title" | sed 's/"/\\"/g')
            safe_desc=$(printf '%s' "$final_desc" | sed 's/"/\\"/g')
            safe_img=$(printf '%s' "$final_image" | sed 's/"/\\"/g')

            printf '{"url":"%s","title":"%s","description":"%s","image":"%s","status":"%s","post_type":"%s"}\n' \
              "$url" "$safe_title" "$safe_desc" "$safe_img" "$status" "$post_type" >> "$OUTPUT_JSON"

          done < "$INPUT_TXT"

          echo "✅ Đã xử lý xong. Kết quả lưu tại: $OUTPUT_JSON"

      - name: Cập nhật lại Gist
        run: |
          curl -X PATCH \
               -H "Authorization: token ${{ secrets.dat_kep }}" \
               -d "{\"files\":{\"processed_urls.jsonl\":{\"content\":$(jq -Rs . < processed_urls.jsonl)}}}" \
               https://api.github.com/gists/${{ github.event.inputs.gist_id }}
